// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Reply struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{1}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "pb.Request")
	proto.RegisterType((*Reply)(nil), "pb.Reply")
}

func init() { proto.RegisterFile("example.proto", fileDescriptor_15a1dc8d40dadaa6) }

var fileDescriptor_15a1dc8d40dadaa6 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x92, 0xe6,
	0x62, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe0, 0x62, 0xce, 0x2d, 0x4e, 0x97,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0x24, 0xb9, 0x58, 0x83, 0x52, 0x0b, 0x72,
	0x2a, 0x31, 0xa5, 0x8c, 0xe2, 0xb9, 0xd8, 0x83, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0x8b, 0x85, 0x34,
	0xb8, 0xb8, 0x3c, 0x12, 0x73, 0xd2, 0x5c, 0x4a, 0x0b, 0x72, 0x52, 0x2b, 0x84, 0xb8, 0xf5, 0x0a,
	0x92, 0xf4, 0xa0, 0x46, 0x4a, 0x71, 0x42, 0x38, 0x05, 0x39, 0x95, 0x4a, 0x0c, 0x06, 0x8c, 0x42,
	0x5a, 0x5c, 0x5c, 0x6e, 0xa5, 0x39, 0x39, 0x84, 0x54, 0x6a, 0x30, 0x1a, 0x30, 0x26, 0xb1, 0x81,
	0xdd, 0x68, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xa1, 0x15, 0x7a, 0xb4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamsClient is the client API for Streams service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamsClient interface {
	HalfDuplex(ctx context.Context, in *Request, opts ...grpc.CallOption) (Streams_HalfDuplexClient, error)
	FullDuplex(ctx context.Context, opts ...grpc.CallOption) (Streams_FullDuplexClient, error)
}

type streamsClient struct {
	cc *grpc.ClientConn
}

func NewStreamsClient(cc *grpc.ClientConn) StreamsClient {
	return &streamsClient{cc}
}

func (c *streamsClient) HalfDuplex(ctx context.Context, in *Request, opts ...grpc.CallOption) (Streams_HalfDuplexClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Streams_serviceDesc.Streams[0], "/pb.Streams/HalfDuplex", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamsHalfDuplexClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streams_HalfDuplexClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type streamsHalfDuplexClient struct {
	grpc.ClientStream
}

func (x *streamsHalfDuplexClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamsClient) FullDuplex(ctx context.Context, opts ...grpc.CallOption) (Streams_FullDuplexClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Streams_serviceDesc.Streams[1], "/pb.Streams/FullDuplex", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamsFullDuplexClient{stream}
	return x, nil
}

type Streams_FullDuplexClient interface {
	Send(*Request) error
	Recv() (*Reply, error)
	grpc.ClientStream
}

type streamsFullDuplexClient struct {
	grpc.ClientStream
}

func (x *streamsFullDuplexClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamsFullDuplexClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamsServer is the server API for Streams service.
type StreamsServer interface {
	HalfDuplex(*Request, Streams_HalfDuplexServer) error
	FullDuplex(Streams_FullDuplexServer) error
}

// UnimplementedStreamsServer can be embedded to have forward compatible implementations.
type UnimplementedStreamsServer struct {
}

func (*UnimplementedStreamsServer) HalfDuplex(req *Request, srv Streams_HalfDuplexServer) error {
	return status.Errorf(codes.Unimplemented, "method HalfDuplex not implemented")
}
func (*UnimplementedStreamsServer) FullDuplex(srv Streams_FullDuplexServer) error {
	return status.Errorf(codes.Unimplemented, "method FullDuplex not implemented")
}

func RegisterStreamsServer(s *grpc.Server, srv StreamsServer) {
	s.RegisterService(&_Streams_serviceDesc, srv)
}

func _Streams_HalfDuplex_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamsServer).HalfDuplex(m, &streamsHalfDuplexServer{stream})
}

type Streams_HalfDuplexServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type streamsHalfDuplexServer struct {
	grpc.ServerStream
}

func (x *streamsHalfDuplexServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func _Streams_FullDuplex_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamsServer).FullDuplex(&streamsFullDuplexServer{stream})
}

type Streams_FullDuplexServer interface {
	Send(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type streamsFullDuplexServer struct {
	grpc.ServerStream
}

func (x *streamsFullDuplexServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamsFullDuplexServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Streams_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Streams",
	HandlerType: (*StreamsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HalfDuplex",
			Handler:       _Streams_HalfDuplex_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FullDuplex",
			Handler:       _Streams_FullDuplex_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "example.proto",
}
