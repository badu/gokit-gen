{{/* functions signature */}}
{{ define "funcSignature" }}{{ .Name }}(ctx context.Context {{- $message := messageByKind .InKind -}}{{- range $message.Fields }},{{ if .IsBasic }}{{lowerFirst .PublicName}} {{.Kind}}{{- else }}{{lowerFirst .PublicName}} *{{.Kind}}{{- end }}{{- end }})({{- $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{if .IsRepeated}}[]{{else if .IsBasic}}{{else}}*{{end}}{{.Kind}},{{- end }} error){{ end }}
{{ define "returnSignature" }}{{- $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{lowerFirst .PublicName}}, {{- end }} err{{ end }}
{{ define "requestSignature" }}{{- $message := messageByKind .InKind -}}{{- range $message.Fields }}{{.ZeroValue}}, {{- end }}{{ end }}
{{- if ne (len .Services) 0}}
package {{ projectName }}_test

import(
	"context"
	"errors"
	"fmt"
	"net"
	"os"
	"testing"
	"time"
	
	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/log/level"
	"github.com/go-kit/kit/transport"
    "github.com/go-kit/kit/endpoint"
	"github.com/stretchr/testify/assert"
	"github.com/dgrijalva/jwt-go"
	"google.golang.org/grpc"

    pb "{{ go_package }}"
	kitJWT "github.com/go-kit/kit/auth/jwt"
    kitGRPC "github.com/go-kit/kit/transport/grpc"
    . "{{ goPkg }}"
)

type MockedRepository struct{}

{{ range .Services}}
    {{- range .Methods }}
    func (r *MockedRepository) {{- template "funcSignature" . -}}{
        // TODO : implement me
        return {{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{.ZeroValue}},{{- end }} errors.New("repository not implemented")
    }
    {{ end }}
{{- end }}

const(
    grpcHostAndPort = "localhost:8082"
)

func generateJWTMeta() string {
	// TODO : customize 
	return ""
}
{{ $hasJWT := .Services.AnyOptionNamedValueEq "security" "jwt" }}
{{- range $service := .Services }}
    {{ $serviceName := .Name | upperFirst }}
    {{- range $method := $service.Methods}}
		{{- if and $method.NoStreaming}}
			// classic grpc call for {{.Name}}            
			func TestGRPC{{.Name}}(t *testing.T){
				logger := log.NewLogfmtLogger(os.Stdout)
				logger = log.With(logger, "caller", log.Caller(4))
				logger = level.NewFilter(logger, level.AllowDebug())
				
				grpcService     := NewService(logger, &MockedRepository{})
				//authMiddleware := MakeEnsureValidJWTMiddleware(logger)
				endpoints 		:= MakeEndpoints(grpcService, []endpoint.Middleware{})//authMiddleware
				grpcServer      := grpc.NewServer()
				
				serverConn, err := net.Listen("tcp", grpcHostAndPort)
				if err != nil {
					panic(fmt.Sprintf("unable to listen: %+v", err))
				}
				defer grpcServer.GracefulStop()	
				{{ if hasStreaming }}
				options := []kitGRPC.ServerOption{
					kitGRPC.ServerBefore(kitJWT.GRPCToContext()),
					{{- if $hasJWT }}
						//kitGRPC.ServerBefore(MakeGRPCDecodeJWTToClaims(jwtSecret, jwt.SigningMethodHS256, logger)),
					{{- end }}
					//kitGRPC.ServerBefore(MakeAddStreamUUID(logger)),
				}
				{{ else }}
				options := []kitGRPC.ServerOption{
					kitGRPC.ServerErrorHandler(transport.NewLogErrorHandler(logger)),
					kitGRPC.ServerBefore(kitJWT.GRPCToContext()),
					{{- if $hasJWT }}
						//kitGRPC.ServerBefore(MakeGRPCDecodeJWTToClaims(jwtSecret, jwt.SigningMethodHS256, logger)),
					{{- end }}
				}
				{{ end }}
				service, err := NewGRPCServer(endpoints, logger, options...)
				if err != nil {
					level.Error(logger).Log("error", err)
				}

				go func() {
					pb.Register{{ $serviceName }}Server(grpcServer, service)
					_ = grpcServer.Serve(serverConn)
				}()

				conn, err := grpc.Dial(grpcHostAndPort, grpc.WithInsecure())
				if err != nil {
					t.Fatalf("unable to Dial: %+v", err)
				}
				
				clientOptions := []kitGRPC.ClientOption{ kitGRPC.ClientBefore(kitJWT.ContextToGRPC()) }
				client := NewClient(conn, logger, clientOptions...)
				
				{{ if .Options.NamedValueEq "security" "jwt" }}
					ctx := context.WithValue(context.Background(), kitJWT.JWTTokenContextKey, generateJWTMeta())
				{{- end }}
				// TODO : load the payloads
				{{ template "returnSignature" . }} := client.{{.Name}}(ctx, {{- template "requestSignature" . }} )
				if err != nil {
					t.Fatalf("unable to test: %+v", err)
				}
				// TODO : check response (write the actual test)         
				{{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}  
				t.Logf("{{lowerFirst .PublicName}} : %v", {{lowerFirst .PublicName}}) 
				{{- end }}          
			}    
        {{- else if and .IsServerStreaming (not .IsClientStreaming) }}
            // half duplex for {{.Name}}
            func TestGRPC{{.Name}}(t *testing.T){
				logger := log.NewLogfmtLogger(os.Stdout)
				logger = log.With(logger, "caller", log.Caller(4))
				logger = level.NewFilter(logger, level.AllowDebug())
				
				grpcService     := NewService(logger, &MockedRepository{})
				//authMiddleware := MakeEnsureValidJWTMiddleware(logger)
				endpoints 		:= MakeEndpoints(grpcService, []endpoint.Middleware{})//authMiddleware
				grpcServer      := grpc.NewServer()
				
				serverConn, err := net.Listen("tcp", grpcHostAndPort)
				if err != nil {
					panic(fmt.Sprintf("unable to listen: %+v", err))
				}
				defer grpcServer.GracefulStop()	
				{{ if hasStreaming }}
				options := []kitGRPC.ServerOption{
					kitGRPC.ServerBefore(kitJWT.GRPCToContext()),
					{{- if $hasJWT }}
						//kitGRPC.ServerBefore(MakeGRPCDecodeJWTToClaims(jwtSecret, jwt.SigningMethodHS256, logger)),
					{{- end }}
					//kitGRPC.ServerBefore(MakeAddStreamUUID(logger)),
				}
				{{ else }}
				options := []kitGRPC.ServerOption{
					kitGRPC.ServerErrorHandler(transport.NewLogErrorHandler(logger)),
					kitGRPC.ServerBefore(kitJWT.GRPCToContext()),
					{{- if $hasJWT }}
						//kitGRPC.ServerBefore(MakeGRPCDecodeJWTToClaims(jwtSecret, jwt.SigningMethodHS256, logger)),
					{{- end }}
				}
				{{ end }}
				service, err := NewGRPCServer(endpoints, logger, options...)
				if err != nil {
					level.Error(logger).Log("error", err)
				}

				go func() {
					pb.Register{{ $serviceName }}Server(grpcServer, service)
					_ = grpcServer.Serve(serverConn)
				}()

				conn, err := grpc.Dial(grpcHostAndPort, grpc.WithInsecure())
				if err != nil {
					t.Fatalf("unable to Dial: %+v", err)
				}
				
				clientOptions := []kitGRPC.ClientOption{ kitGRPC.ClientBefore(kitJWT.ContextToGRPC()) }
				client := NewClient(conn, logger, clientOptions...)
				
				{{ if .Options.NamedValueEq "security" "jwt" }}
					ctx := context.WithValue(context.Background(), kitJWT.JWTTokenContextKey, generateJWTMeta())
				{{- end }}
				var cancel context.CancelFunc
				ctx, cancel = context.WithCancel(ctx)
				// simulate broadcasting messages
				go func(){				
					ticker := time.NewTicker(2 * time.Second)
					stopTimer := time.After(12 * time.Second)	
					for {
						select {
						case <-ctx.Done():
							logger.Log("server","stop")
							return
						case <-ticker.C:
							grpcService.Broadcast{{.Name}}() <- {{.OutKind}}{}             
							logger.Log("broadcasting","{{.Name}} <- {{.OutKind}}{}")
						case <-stopTimer:
							logger.Log("server","end of life")
							ticker.Stop()
							cancel()						
						}
					}
				}()
				// client receive loop
				go func(){
					logger.Log("client","waiting for messages")
					for {
						select {
							case <-ctx.Done():
								t.Log("Context done")
								return
							case message := <-client.Receive{{.Name}}():								
								// TODO : check response (write the actual test)
								{{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}  
								t.Logf("{{lowerFirst .PublicName}} : %v", message.{{.PublicName}}) 
								{{- end }}
						}
					}
				}()
				logger.Log("client","placing call to {{.Name}}")
				// TODO : load the payloads
				err = client.Call{{.Name}}(ctx, {{- $message := messageByKind .InKind -}}{{- range $message.Fields }}{{- $subMessage := messageByKind .Kind -}}&{{.Kind}} { {{- range $subMessage.Fields }}{{.PublicName}}:{{.ZeroValue}},{{ end }} },  {{- end }} )
				if err != nil && err.Error() != "rpc error: code = Canceled desc = context canceled" {
					t.Fatalf("unable to test: %+v", err)
				}		     
				logger.Log("client", "end of test") 
			}
        {{- else if and (not .IsServerStreaming) .IsClientStreaming }}
            // reverse half duplex for {{.Name}}
            func TestGRPC{{.Name}}(t *testing.T){
				logger := log.NewLogfmtLogger(os.Stdout)
				logger = log.With(logger, "caller", log.Caller(4))
				logger = level.NewFilter(logger, level.AllowDebug())
				
				grpcService     := NewService(logger, &MockedRepository{})
				//authMiddleware := MakeEnsureValidJWTMiddleware(logger)
				endpoints 		:= MakeEndpoints(grpcService, []endpoint.Middleware{})//authMiddleware
				grpcServer      := grpc.NewServer()
				
				serverConn, err := net.Listen("tcp", grpcHostAndPort)
				if err != nil {
					panic(fmt.Sprintf("unable to listen: %+v", err))
				}
				defer grpcServer.GracefulStop()	
				{{ if hasStreaming }}
				options := []kitGRPC.ServerOption{
					kitGRPC.ServerBefore(kitJWT.GRPCToContext()),
					{{- if $hasJWT }}
						//kitGRPC.ServerBefore(MakeGRPCDecodeJWTToClaims(jwtSecret, jwt.SigningMethodHS256, logger)),
					{{- end }}
					//kitGRPC.ServerBefore(MakeAddStreamUUID(logger)),
				}
				{{ else }}
				options := []kitGRPC.ServerOption{
					kitGRPC.ServerErrorHandler(transport.NewLogErrorHandler(logger)),
					kitGRPC.ServerBefore(kitJWT.GRPCToContext()),
					{{- if $hasJWT }}
						//kitGRPC.ServerBefore(MakeGRPCDecodeJWTToClaims(jwtSecret, jwt.SigningMethodHS256, logger)),
					{{- end }}
				}
				{{ end }}
				service, err := NewGRPCServer(endpoints, logger, options...)
				if err != nil {
					level.Error(logger).Log("error", err)
				}

				go func() {
					pb.Register{{ $serviceName }}Server(grpcServer, service)
					_ = grpcServer.Serve(serverConn)
				}()

				conn, err := grpc.Dial(grpcHostAndPort, grpc.WithInsecure())
				if err != nil {
					t.Fatalf("unable to Dial: %+v", err)
				}
				
				clientOptions := []kitGRPC.ClientOption{ kitGRPC.ClientBefore(kitJWT.ContextToGRPC()) }
				client := NewClient(conn, logger, clientOptions...)
				
				{{ if .Options.NamedValueEq "security" "jwt" }}
					ctx := context.WithValue(context.Background(), kitJWT.JWTTokenContextKey, generateJWTMeta())
				{{- end }}
				// simulate broadcasting messages
				go func(){				
					cliTicker := time.NewTicker(3 * time.Second)
					stopTimer := time.After(12 * time.Second)	
					for {
						select {
						case <-ctx.Done():
							logger.Log("server","stop")
							return
						case <-cliTicker.C:
							client.Broadcast{{.Name}}() <- &pb.{{.InKind}}{}
							logger.Log("from_client","{{.Name}} <- &pb.{{.InKind}}{}")
						case <-stopTimer:
							logger.Log("server","end of life")
							client.Close{{.Name}}() <- struct{}{}
							cliTicker.Stop()
							return					
						}
					}
				}()
				// TODO : load the payloads
				reply, err := client.Call{{.Name}}(ctx)
				if err != nil && err.Error() != "rpc error: code = Canceled desc = context canceled" {
					t.Fatalf("unable to test: %+v", err)
				}
				// TODO : check response (write the actual test)         
				{{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}  
				t.Logf("{{lowerFirst .PublicName}} : %v", reply.{{.PublicName}}) 
				{{- end }}          
			}      
        {{- else if and .IsServerStreaming .IsClientStreaming }}
            // full duplex for {{.Name}}
            func TestGRPC{{.Name}}(t *testing.T){
				logger := log.NewLogfmtLogger(os.Stdout)
				logger = log.With(logger, "caller", log.Caller(4))
				logger = level.NewFilter(logger, level.AllowDebug())
				
				grpcService     := NewService(logger, &MockedRepository{})
				//authMiddleware := MakeEnsureValidJWTMiddleware(logger)
				endpoints 		:= MakeEndpoints(grpcService, []endpoint.Middleware{})//authMiddleware
				grpcServer      := grpc.NewServer()
				
				serverConn, err := net.Listen("tcp", grpcHostAndPort)
				if err != nil {
					panic(fmt.Sprintf("unable to listen: %+v", err))
				}
				defer grpcServer.GracefulStop()	
				{{ if hasStreaming }}
				options := []kitGRPC.ServerOption{
					kitGRPC.ServerBefore(kitJWT.GRPCToContext()),
					{{- if $hasJWT }}
						//kitGRPC.ServerBefore(MakeGRPCDecodeJWTToClaims(jwtSecret, jwt.SigningMethodHS256, logger)),
					{{- end }}
					//kitGRPC.ServerBefore(MakeAddStreamUUID(logger)),
				}
				{{ else }}
				options := []kitGRPC.ServerOption{
					kitGRPC.ServerErrorHandler(transport.NewLogErrorHandler(logger)),
					kitGRPC.ServerBefore(kitJWT.GRPCToContext()),
					{{- if $hasJWT }}
						//kitGRPC.ServerBefore(MakeGRPCDecodeJWTToClaims(jwtSecret, jwt.SigningMethodHS256, logger)),
					{{- end }}
				}
				{{ end }}
				service, err := NewGRPCServer(endpoints, logger, options...)
				if err != nil {
					level.Error(logger).Log("error", err)
				}

				go func() {
					pb.Register{{ $serviceName }}Server(grpcServer, service)
					_ = grpcServer.Serve(serverConn)
				}()

				conn, err := grpc.Dial(grpcHostAndPort, grpc.WithInsecure())
				if err != nil {
					t.Fatalf("unable to Dial: %+v", err)
				}
				
				clientOptions := []kitGRPC.ClientOption{ kitGRPC.ClientBefore(kitJWT.ContextToGRPC()) }
				client := NewClient(conn, logger, clientOptions...)
				
				{{ if .Options.NamedValueEq "security" "jwt" }}
					ctx := context.WithValue(context.Background(), kitJWT.JWTTokenContextKey, generateJWTMeta())
				{{- end }}
				var cancel context.CancelFunc
				ctx, cancel = context.WithCancel(ctx)
				// simulate broadcasting messages
				go func(){				
					ticker := time.NewTicker(2 * time.Second)
					cliTicker := time.NewTicker(3 * time.Second)
					stopTimer := time.After(12 * time.Second)	
					for {
						select {
						case <-ctx.Done():
							logger.Log("server","stop")
							return
						case <-ticker.C:
							grpcService.Broadcast{{.Name}}() <- {{.OutKind}}{}             
							logger.Log("from_server","{{.Name}} <- {{.OutKind}}{}")
						case <-cliTicker.C:
							client.Broadcast{{.Name}}() <- &pb.{{.InKind}}{}
							logger.Log("from_client","{{.Name}} <- &pb.{{.InKind}}{}")
						case <-stopTimer:
							logger.Log("server","end of life")
							ticker.Stop()
							cliTicker.Stop()
							cancel()						
						}
					}
				}()
				// client receive loop
				go func(){
					logger.Log("client","waiting for messages")
					for {
						select {
							case <-ctx.Done():
								t.Log("Context done")
								return
							case message := <-client.Receive{{.Name}}():								
								// TODO : check response (write the actual test)
								{{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}  
								t.Logf("{{lowerFirst .PublicName}} : %v", message.{{.PublicName}}) 
								{{- end }}
						}
					}
				}()
				logger.Log("client","placing call to {{.Name}}")
				// TODO : load the payloads
				err = client.Call{{.Name}}(ctx)
				if err != nil && err.Error() != "rpc error: code = Canceled desc = context canceled" {
					t.Fatalf("unable to test: %+v", err)
				}		     
				logger.Log("client", "end of test")          
			}   
        {{- end }} {{/* streaming ifs*/}}
    {{ end }} {{/* range Method */}}
{{- end }} {{/* range services */}}

{{- end }}{{/* we have service */}}