{{- if usesHTTP }}{{- if ne (len .Services) 0}}
package {{ projectName }}

import(
    "context"
	"fmt"
	"net/url"

    "google.golang.org/grpc"
	"github.com/go-kit/kit/log"
    "github.com/go-kit/kit/log/level"
    "github.com/go-kit/kit/endpoint"

    pb "{{ go_package }}"
    {{ range $key, $value := sharedImports }} {{ $key }} "{{ $value }}" {{- end }}
    kitHTTP "github.com/go-kit/kit/transport/http"
)

{{/* service interface implementation */}}
{{- range .Services }}
    {{- range .Methods}}            
        {{ if .NoStreaming}}            
            func encode{{.Name}}HTTPRequest(logger log.Logger) func(context.Context,*http.Request,interface{}) error{
                return func(ctx context.Context, req *http.Request, request interface{}) error {
                    req.URL.Path = "{{.GetHTTPRoute}}"
                    var buf bytes.Buffer                    
                    if err := json.NewEncoder(&buf).Encode(request);err != nil {
                         level.Error(logger).Log("encode{{.Name}}HTTPRequest",err)
                        return err
                    }
                    req.Body = ioutil.NopCloser(&buf)
                    return nil
                }
            }
        {{- end }} {{/* streaming ifs*/}}
    {{ end }} {{/* range Method */}}
{{- end }} {{/* range services */}}
{{- end }}{{/* we have service */}}{{- end }}{{/* uses HTTP */}}