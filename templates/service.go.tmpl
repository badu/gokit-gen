{{/* functions signature */}}
{{ define "funcSignature" }}{{ .Name }}(ctx context.Context {{- $message := messageByKind .InKind -}}{{- range $message.Fields }},{{ if .IsBasic }}{{lowerFirst .PublicName}} {{.Kind}}{{- else }}{{lowerFirst .PublicName}} *{{.Kind}}{{- end }}{{- end }})({{- $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{ if .IsRepeated}}[]{{else if .IsBasic}}{{else}}*{{end}}{{.Kind}},{{- end }} error){{ end }}
{{ define "repoSignature" }}{{- $message := messageByKind .OutKind -}}{{- range $message.Fields }}res{{.PublicName}},{{- end }} err:= s.repo.{{ .Name }}(ctx {{- $message := messageByKind .InKind -}}{{- range $message.Fields }},{{ if .IsBasic }}{{lowerFirst .PublicName}}{{- else }}{{lowerFirst .PublicName}}{{- end }}{{- end }}){{ end }}
{{ define "serviceReturn" }}{{- $message := messageByKind .OutKind -}}{{- range $message.Fields }}res{{.PublicName}},{{- end }}nil{{ end }}
{{- if ne (len .Services) 0}}
package {{ projectName }}

import(
    "errors"
    "context"
    
    "github.com/go-kit/kit/log"
	"github.com/go-kit/kit/log/level"
    {{ if hasStreaming }}pb "{{ go_package }}"{{end}}
)

type Service interface {
    {{- range $service := .Services }}
        {{- range $method := $service.Methods}}
            {{- if .NoStreaming }}
                {{ template "funcSignature" . }}
            {{- else if and .IsServerStreaming (not .IsClientStreaming) }}
                Broadcast{{.Name}}() chan {{.OutKind}}                
                {{.Name}}(req *pb.{{.InKind}}, stream pb.{{$service.Name}}_{{.Name}}Server) error // half duplex (client request, server streams)
            {{- else if and (not .IsServerStreaming) .IsClientStreaming }}
                {{.Name}}(stream pb.{{$service.Name}}_{{.Name}}Server) error // reverse half duplex (client streams, server responds)
            {{- else if and .IsServerStreaming .IsClientStreaming }}
                Broadcast{{.Name}}() chan {{.OutKind}}
                {{.Name}}(stream pb.{{$service.Name}}_{{.Name}}Server) error // full duplex (both client and server streams)
            {{- end}} {{/* streaming ifs*/}}
        {{- end}} {{/* range Method */}}
    {{- end }} {{/* range services */}}
    Log() log.Logger
}

type serviceImpl struct{
    log  log.Logger
	repo    Repository
    {{- range $service := .Services }}
        {{- range $method := $service.Methods}}
            {{- if .IsServerStreaming }}
                broadcast{{.Name}} chan {{.OutKind}} // channel to stream to clients
            {{- end }}
        {{- end }}
    {{- end }}
}

func NewService(log log.Logger, repo Repository) Service{
    return &serviceImpl{ log:log, repo:repo, {{- range .Services }}{{- range .Methods}}{{- if .IsServerStreaming }} broadcast{{.Name}}: make(chan {{.OutKind}}),{{- end }}{{- end }}{{- end }} }
}

func (s *serviceImpl) Log() log.Logger {
	return s.log
}

{{- range $service := .Services }}
    {{- range $method := $service.Methods}}
        {{- if .IsServerStreaming }}
            // getter for broadcast{{.Name}} chan {{.OutKind}}
            func (s *serviceImpl) Broadcast{{.Name}}() chan {{.OutKind}}{
                return s.broadcast{{.Name}}
            }
        {{- end }}
    {{- end }}
{{ end }}

{{- range $service := .Services }}
    {{- range $method := $service.Methods}}
        {{- if and $method.NoStreaming}}
            func (s *serviceImpl) {{- template "funcSignature" . -}}{
                {{ template "repoSignature" . }}
                if err!=nil{
                    return {{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{.ZeroValue}},{{- end }} err
                }
                return {{ template "serviceReturn" . }}
            }
        {{- else if and .IsServerStreaming (not .IsClientStreaming) }}
            // half duplex for {{.Name}}
            func (s *serviceImpl) {{.Name}}(pbReq *pb.{{.InKind}}, stream pb.{{$service.Name}}_{{.Name}}Server) error{
                waitc := make(chan struct{})
                // server sending loop. exit conditions : client closes or sending error
                var sendErr error
                go func(ctx context.Context, waitChannel chan struct{}){
                    for {
                        select {
                            case <-ctx.Done():
                                level.Debug(s.log).Log("{{.Name}}Service", "Context done (client closed)")
                                close(waitChannel)
                                return
                            case message := <-s.broadcast{{.Name}}:
                                level.Debug(s.log).Log("{{.Name}}Service", "Sending payload")
                                payload:=NewPBFrom{{.OutKind}}(&message)
                                // send a message to the client
                                if sendErr = stream.Send(payload); sendErr != nil {
                                    level.Error(s.log).Log("send_error", sendErr)
                                    close(waitChannel)
                                    return
                        }                        
                    }
                }
                }(stream.Context(), waitc)
                // send response to client : POC for using broadcast channel
                req := New{{.InKind}}FromPB(pbReq)
                {{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}res{{.PublicName}},{{- end }} err:= s.repo.{{ .Name }}(stream.Context() {{- $message := messageByKind .InKind -}}{{- range $message.Fields }},req.{{.PublicName}}{{- end }})
                if err!=nil{
                    return err    
                }
                resp := {{.OutKind}}{ {{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{.PublicName}} : res{{.PublicName}},{{- end }} }
                s.broadcast{{.Name}} <- resp
                // wait until client has closed or we're having a sending error                
                <-waitc                
                return sendErr
            }
        {{- else if and (not .IsServerStreaming) .IsClientStreaming }}
            // reverse half duplex for {{.Name}}
            func (s *serviceImpl) {{.Name}}(stream pb.{{$service.Name}}_{{.Name}}Server) error{
                // client receive loop : blocks until client closes or we have an error other than sending
                for {
                    pbReq, err := stream.Recv()
                    if err == io.EOF {
                        level.Debug(s.log).Log("{{.Name}}Service", "client closed")
                        // TODO : make payload to be returned
                        sendErr := stream.SendAndClose(&pb.{{.OutKind}} { 
                            {{ $message := messageByKind .OutKind -}}{{- range $message.Fields }} {{.PublicName}}:{{.ZeroValue}},{{- end }}
                        }) 
                        if sendErr != nil{
                            level.Error(s.log).Log("send_error", sendErr)
                        }
                        return nil// no error, client just closed
                    }
                    if err != nil {
                        level.Error(s.log).Log("receive_error", err)
                        return err // receive error
                    }
                    
                    req := New{{.InKind}}FromPB(pbReq)
                    // store in repository
                    {{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}_,{{- end }} err = s.repo.{{ .Name }}(stream.Context() {{- $message := messageByKind .InKind -}}{{- range $message.Fields }},req.{{.PublicName}}{{- end }})
                    if err!=nil{
                        return err    
                    }
                }
                
                return nil
            }
        {{- else if and .IsServerStreaming .IsClientStreaming }}
            // full duplex for {{.Name}}
            func (s *serviceImpl) {{.Name}}(stream pb.{{$service.Name}}_{{.Name}}Server) error{       
                 // server sending loop. exit conditions : client closes or sending error
                var sendErr error
                go func(ctx context.Context){
                for {
                    select {
                        case <-ctx.Done():
                            level.Debug(s.log).Log("{{.Name}}Service", "Context done (client closed)")
                            return
                        case message := <-s.broadcast{{.Name}}:
                            level.Debug(s.log).Log("{{.Name}}Service", "Sending payload")
                            payload:=NewPBFrom{{.OutKind}}(&message)
                            // send a message to the client
                            if sendErr = stream.Send(payload); sendErr != nil {
                                level.Error(s.log).Log("send_error", sendErr)
                                return
                            }                        
                    }
                }
                }(stream.Context())
                // client receive loop : blocks until client closes or we have an error other than sending
                for {
                    pbReq, err := stream.Recv()
                    if err == io.EOF {
                        level.Debug(s.log).Log("{{.Name}}Service", "client closed")
                        return nil // no error, client just closed
                    }
                    if err != nil {
                        level.Error(s.log).Log("receive_error", err)
                        return err // receive error
                    }
                    // checking if sending error has happen previously
                    if sendErr!= nil{
                        return sendErr
                    }

                    req := New{{.InKind}}FromPB(pbReq)
                    {{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}res{{.PublicName}},{{- end }} err:= s.repo.{{ .Name }}(stream.Context() {{- $message := messageByKind .InKind -}}{{- range $message.Fields }},req.{{.PublicName}}{{- end }})
                    if err!=nil{
                        return err    
                    }
                    resp := {{.OutKind}}{ {{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{.PublicName}} : res{{.PublicName}},{{- end }} }
                    s.broadcast{{.Name}} <- resp
                }  
                // if we had a previous sending error, we're returning it               
                return sendErr
            }
        {{- end }} {{/* streaming ifs*/}}
    {{ end }} {{/* range Method */}}
{{- end }} {{/* range services */}}

{{- end }}{{/* we have service */}}