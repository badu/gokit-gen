{{ define "funcSignature" }}{{ .Name }}(ctx context.Context {{- $message := messageByKind .InKind -}}{{- range $message.Fields }},{{ if .IsBasic }}{{lowerFirst .PublicName}} {{.GoKind}}{{- else }}{{lowerFirst .PublicName}} *{{.GoKind}}{{- end }}{{- end }})({{- $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{ if .IsRepeated}}[]{{else if .IsBasic}}{{else}}*{{end}}{{.GoKind}},{{- end }} error){{ end }}
{{ define "requestSignature" }}{{- $message := messageByKind .InKind -}}{{- range $message.Fields }}{{.PublicName}}:{{lowerFirst .PublicName}}, {{- end }}{{ end }}
{{ define "responseSignature" }}{{- $message := messageByKind .OutKind -}}{{- range $message.Fields }}domResp.{{.PublicName}}, {{- end }}{{ end }}
{{- if ne (len .Services) 0}}
package {{ projectName }}

import(
    "context"
	"fmt"
	
    "google.golang.org/grpc"
	"github.com/go-kit/kit/log"
    "github.com/go-kit/kit/log/level"
    "github.com/go-kit/kit/endpoint"

    pb "{{ go_package }}"
    kitGRPC "github.com/go-kit/kit/transport/grpc"
)

{{/* service interface implementation */}}
{{- range $service := .Services }}
    {{ $serviceName := .Name | upperFirst }}
    {{- range $method := $service.Methods}}            
        {{ if .NoStreaming}}
            func encode{{.Name}}GRPCRequest(logger log.Logger) func(context.Context, interface{})(interface{},error){
                return func(ctx context.Context, req interface{}) (interface{}, error) {
                    pbReq, ok := req.(*{{.InKind}})
                    if !ok{
                        err := fmt.Errorf("expecting *{{.InKind}}Request received %T", req)
                        level.Error(logger).Log("decode{{.Name}}GRPCRequest",err)
                        return nil, err
                    }
                    return NewPBFrom{{.InKind}}(pbReq), nil
                }
            }

        {{- end }} {{/* streaming ifs*/}}
    {{ end }} {{/* range Method */}}
{{- end }} {{/* range services */}}

{{- end }}{{/* we have service */}}