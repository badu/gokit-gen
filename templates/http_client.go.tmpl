{{- if usesHTTP }}{{- if ne (len .Services) 0}}
package {{ projectName }}

import(
    "context"
	"fmt"
	"net/url"

    "google.golang.org/grpc"
	"github.com/go-kit/kit/log"
    "github.com/go-kit/kit/log/level"
    "github.com/go-kit/kit/endpoint"

    pb "{{ go_package }}"
    {{ range $key, $value := sharedImports }} {{ $key }} "{{ $value }}" {{- end }}
    kitHTTP "github.com/go-kit/kit/transport/http"
)

type httpClient struct{
	log log.Logger
    {{- range $service := .Services }}
        {{- range $method := $service.Methods}}
            {{- if .NoStreaming }}
                {{.Name}}Endpoint endpoint.Endpoint
            {{- end}} {{/* streaming ifs*/}}
        {{- end}} {{/* range Method */}}
    {{- end }} {{/* range services */}}
}

func (c *httpClient) Log() log.Logger {
	return c.log
}

{{/* service interface implementation */}}
{{- range .Services }}
    {{- range .Methods}}            
        {{ if .NoStreaming}}            
            func (c *httpClient) {{ .Name }}(ctx context.Context {{- $message := messageByKind .InKind -}}{{- range $message.Fields }},{{ if .IsBasic }}{{lowerFirst .PublicName}} {{.GoKind}}{{- else }}{{lowerFirst .PublicName}} *{{.GoKind}}{{- end }}{{- end }})({{- $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{ if .IsRepeated}}[]{{else if .IsBasic}}{{else}}*{{end}}{{.GoKind}},{{- end }} error) {
                {{- if eq 0 (len $message.Fields) }}
                    if _, err := c.{{.Name}}Endpoint(ctx,  &{{ .InKind }}{ {{- $message := messageByKind .InKind -}}{{- range $message.Fields }}{{.PublicName}}:{{lowerFirst .PublicName}}, {{- end }} });err != nil {
                        return err
                    } 
                    return nil
                {{- else }}
                    resp, err := c.{{.Name}}Endpoint(ctx,  &{{ .InKind }}{ {{- $message := messageByKind .InKind -}}{{- range $message.Fields }}{{.PublicName}}:{{lowerFirst .PublicName}}, {{- end }} })
                    if err != nil {
                        return {{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{.ZeroValue}},{{- end }} err
                    }
                    domResp, ok := resp.(*{{.OutKind}})
                    if !ok{
                        err := fmt.Errorf("expecting *{{.OutKind}} received %T", resp)
                        return {{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{.ZeroValue}},{{- end }} err
                    } 
                    return {{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}domResp.{{.PublicName}}, {{- end }} nil
                {{- end }}
            }   
        {{- end }} {{/* streaming ifs*/}}
    {{ end }} {{/* range Method */}}
{{- end }} {{/* range services */}}

func NewHTTPClient(serverAddr string, logger log.Logger, options ...kitHTTP.ClientOption) (Service,error) {
	{{- range .Services }}
            {{- range .Methods}}
                {{- if .NoStreaming}}
                    url{{.Name}}, err := url.Parse(serverAddr+"{{ .GetHTTPRoute }}")
                    if err!=nil{
                        return nil,err
                    }
                {{- end }}{{/* if-else no streaming */}}
            {{- end }}{{/* range Method */}}
        {{- end }} {{/* range services */}}
    result := &httpClient{
		log:logger,        
        {{- range .Services }}
            {{- range .Methods}}
                {{- if .NoStreaming}}
                    {{.Name }}Endpoint : kitHTTP.NewClient(
						{{ .GetHTTPVerb }},
						url{{.Name}},
						encode{{.Name}}HTTPRequest(logger),
						decode{{.Name}}HTTPResponse(logger),
						options...,
					).Endpoint(),
                {{- end }}{{/* if-else no streaming */}}
            {{- end }}{{/* range Method */}}
        {{- end }} {{/* range services */}}
	}
    return result,nil
}

{{- end }}{{/* we have service */}}{{- end }}{{/* uses HTTP */}}