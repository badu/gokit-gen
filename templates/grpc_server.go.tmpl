{{- if ne (len .Services) 0}}
package {{ projectName }}

import(
    "context"
	"fmt"
	
	"github.com/go-kit/kit/log"
    "github.com/go-kit/kit/log/level"

    pb "{{ go_package }}"
    kitGRPC "github.com/go-kit/kit/transport/grpc"
)

type GRPCServer struct {
	logger log.Logger
    {{- range $service := .Services }}
        {{- range $method := $service.Methods}}
            {{- if .NoStreaming }}
                {{.Name}}GRPCHandler kitGRPC.Handler
            {{- else if and .IsServerStreaming (not .IsClientStreaming) }}
                {{.Name}}GRPCHandler kitGRPC.Handler // TODO : half duplex
            {{- else if and (not .IsServerStreaming) .IsClientStreaming }}
                {{.Name}}GRPCHandler kitGRPC.Handler // TODO : reverse half duplex
            {{- else if and .IsServerStreaming .IsClientStreaming }}
                {{.Name}}GRPCHandler kitGRPC.Handler  // TODO : full duplex
            {{- end}} {{/* streaming ifs*/}}
        {{- end}} {{/* range Method */}}
    {{- end }} {{/* range services */}}
}

func NewGRPCServer(endpoints Endpoints, logger log.Logger, options ...kitGRPC.ServerOption) (*GRPCServer, error) {
	return &GRPCServer{
		logger:logger, {{- range $service := .Services }}
            {{ range $method := $service.Methods}}	
            {{.Name}}GRPCHandler: kitGRPC.NewServer(
					endpoints.{{.Name}}Endpoint,
                    {{- if $method.NoStreaming }}
					decode{{.Name}}GRPCRequest(logger),
					encode{{.Name}}GRPCResponse(logger),
                    {{- else }}
                    decode{{.Name}}GRPCStreamRequest(logger),
					encode{{.Name}}GRPCStreamResponse(logger),
                    {{- end }}
                    {{- if $method.NoStreaming }}
					options...,
                    {{- else }}
                    options..., // TODO : maybe no options for streaming?
                    {{- end }}
				),{{ end }} {{/* range Method */}}
        {{- end }} {{/* range services */}}
	}, nil
}

{{- range $service := .Services }}
    {{- range $method := $service.Methods }}
        {{ if $method.NoStreaming }}
            func decode{{.Name}}GRPCRequest(logger log.Logger) func(context.Context, interface{})(interface{},error){
                return func(ctx context.Context, req interface{}) (interface{}, error) {
                    pbReq, ok := req.(*pb.{{.InKind}})
                    if !ok{
                        err := fmt.Errorf("expecting *pb.{{.InKind}} received %T", req)
                        level.Error(logger).Log("decode{{.Name}}GRPCRequest",err)
                        return nil, err
                    }
                    // TODO : validate protobuf
                    return New{{.InKind}}FromPB(pbReq), nil
                }
            }

            func encode{{.Name}}GRPCResponse(logger log.Logger) func(context.Context, interface{})(interface{},error){
                return func(ctx context.Context, resp interface{}) (interface{}, error) {
                    domResp, ok := resp.(*{{.OutKind}})
                    if !ok{
                        err :=  fmt.Errorf("expecting *{{.OutKind}} received %T", resp)
                        level.Error(logger).Log("encode{{.Name}}GRPCRequest",err)
                        return nil, err
                    }				
                    return NewPBFrom{{.OutKind}}(domResp), nil
                }
            }
        {{- else }}
            // streaming decoder : nothing to do, just pass it over
            // it will be service responsibility to decode
           func decode{{.Name}}GRPCStreamRequest(logger log.Logger) func(context.Context, interface{})(interface{},error){
               return func(ctx context.Context, req interface{}) (interface{}, error) {
                   return req, nil
               }
           }
           // streaming encoder : nothing to do, just pass it over
           // it will be service responsibility to encode
           func encode{{.Name}}GRPCStreamResponse(logger log.Logger) func(context.Context, interface{})(interface{},error){
               return func(ctx context.Context, resp interface{}) (interface{}, error) {
                   return resp, nil
               }
           }
        {{- end }} 
    {{- end}}
{{- end }}

{{- range $service := .Services }}
    {{ $serviceName := .Name | upperFirst }}
    {{- range $method := $service.Methods}}       
        {{- if and .IsServerStreaming (not .IsClientStreaming) }}
            // request and stream for half duplex
            type RequestAndStream{{.Name}} struct{
                Request *pb.{{.InKind}}
                Stream pb.{{$service.Name}}_{{.Name}}Server
            }
        {{- end }} {{/* streaming ifs*/}}
    {{ end }} {{/* range Method */}}
{{- end }} {{/* range services */}}

{{- range $service := .Services }}
    {{ $serviceName := .Name | upperFirst }}
    {{- range $method := $service.Methods}}
        {{- if $method.NoStreaming}}
            // protobuf implementation : no streaming for {{ .Name }}            
            func (s *GRPCServer) {{.Name}}(ctx context.Context, req *pb.{{.InKind}}) (*pb.{{.OutKind}}, error) {
                _, resp, err := s.{{.Name}}GRPCHandler.ServeGRPC(ctx, req)
                if err != nil {
                    return nil, err
                }
                pbResp, ok := resp.(*pb.{{.OutKind}})
                if !ok{
                    err := fmt.Errorf("expecting *pb.{{.OutKind}} received %T", resp)
                    return nil, err 
                } 
                return pbResp, nil
            }
        {{- else if and .IsServerStreaming (not .IsClientStreaming) }}
            // protobuf implementation : half duplex for {{.Name}}
            func (s *GRPCServer) {{.Name}}(req *pb.{{.InKind}}, stream pb.{{$service.Name}}_{{.Name}}Server) error {
                reqNStream := &RequestAndStream{{.Name}}{  Request : req, Stream : stream }
		        _,_,err := s.{{.Name}}GRPCHandler.ServeGRPC(stream.Context(), reqNStream)
				return err
		    }
        {{- else if and (not .IsServerStreaming) .IsClientStreaming }}
            // protobuf implementation : reverse half duplex for {{.Name}}
            func (s *GRPCServer) {{.Name}}(stream pb.{{ $serviceName }}_{{.Name}}Server) error {
		        _,_,err := s.{{.Name}}GRPCHandler.ServeGRPC(stream.Context(), stream)
				return err
		    }      
        {{- else if and .IsServerStreaming .IsClientStreaming }}
            // protobuf implementation : full duplex for {{.Name}}
            func (s *GRPCServer) {{.Name}}(stream pb.{{ $serviceName }}_{{.Name}}Server) error {
		        _,_,err := s.{{.Name}}GRPCHandler.ServeGRPC(stream.Context(), stream)
				return err
		    }   
        {{- end }} {{/* streaming ifs*/}}
    {{ end }} {{/* range Method */}}
{{- end }} {{/* range services */}}

{{- end }}{{/* we have service */}}