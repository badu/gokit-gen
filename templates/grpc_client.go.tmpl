{{ define "funcSignature" }}{{ .Name }}(ctx context.Context {{- $message := messageByKind .InKind -}}{{- range $message.Fields }},{{ if .IsBasic }}{{lowerFirst .PublicName}} {{.GoKind}}{{- else }}{{lowerFirst .PublicName}} *{{.Kind}}{{- end }}{{- end }})({{- $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{ if .IsRepeated}}[]{{else if .IsBasic}}{{else}}*{{end}}{{.Kind}},{{- end }} error){{ end }}
{{ define "requestSignature" }}{{- $message := messageByKind .InKind -}}{{- range $message.Fields }}{{.PublicName}}:{{lowerFirst .PublicName}}, {{- end }}{{ end }}
{{ define "responseSignature" }}{{- $message := messageByKind .OutKind -}}{{- range $message.Fields }}domResp.{{.PublicName}}, {{- end }}{{ end }}
{{- if ne (len .Services) 0}}
package {{ projectName }}

import(
    "context"
	"fmt"
	
    "google.golang.org/grpc"
	"github.com/go-kit/kit/log"
    "github.com/go-kit/kit/log/level"
    "github.com/go-kit/kit/endpoint"

    pb "{{ go_package }}"
    kitGRPC "github.com/go-kit/kit/transport/grpc"
)
{{ if hasStreaming }}
type ClientOption func(*grpcClient)
type ClientRequestFunc func(context.Context, *metadata.MD) context.Context
type ClientResponseFunc func(context.Context, metadata.MD, metadata.MD) context.Context

func ClientBefore(before ...ClientRequestFunc) ClientOption {
	return func(c *grpcClient) { c.before = append(c.before, before...) }
}

func ClientAfter(after ...ClientResponseFunc) ClientOption {
	return func(c *grpcClient) { c.after = append(c.after, after...) }
}
{{ end }}

type grpcClient struct{
	log log.Logger
    {{- range $service := .Services }}
        {{- range $method := $service.Methods}}
            {{- if .NoStreaming }}
                {{.Name}}Endpoint endpoint.Endpoint
            {{- else if and .IsServerStreaming (not .IsClientStreaming) }}
                receive{{.Name}} chan *{{.OutKind}} // TODO : collect payloads from this channel
            {{- else if and (not .IsServerStreaming) .IsClientStreaming }}
                broadcast{{.Name}} chan *pb.{{.InKind}} // TODO : send payloads to this channel
                close{{.Name}} chan struct{} // TODO : send close "signal" to this channel
            {{- else if and .IsServerStreaming .IsClientStreaming }}
                receive{{.Name}} chan *{{.OutKind}} // TODO : collect payloads from this channel
                broadcast{{.Name}} chan *pb.{{.InKind}} // TODO : send payloads to this channel
            {{- end}} {{/* streaming ifs*/}}
        {{- end}} {{/* range Method */}}
        {{- if hasStreaming }}
            directClient    pb.{{$service.Name}}Client
            before    []ClientRequestFunc
            after     []ClientResponseFunc           
        {{- end }}
    {{- end }} {{/* range services */}}
}

func (c *grpcClient) Log() log.Logger {
	return c.log
}

{{ if hasStreaming }}
func (c *grpcClient) ApplyExtraOptions(options ...ClientOption) {
	for _, option := range options {
		option(c)
	}
}
{{ end }}

{{- range $service := .Services }}
    {{- range $method := $service.Methods}}
        {{- if and .IsServerStreaming (not .IsClientStreaming) }}
            // getter for receive{{.Name}} chan {{.OutKind}}
            func (c *grpcClient) Receive{{.Name}}() chan *{{.OutKind}}{
                return c.receive{{.Name}}
            }
        {{- else if and (not .IsServerStreaming) .IsClientStreaming }}
            // getter for broadcast{{.Name}} chan *pb.{{.InKind}}
            func (c *grpcClient) Broadcast{{.Name}}() chan *pb.{{.InKind}}{
                return c.broadcast{{.Name}}
            }
            // getter for close{{.Name}} to end streaming to server
            func (c *grpcClient) Close{{.Name}}() chan struct{}{
                return c.close{{.Name}}
            }
        {{- else if and .IsServerStreaming .IsClientStreaming }}
            // getter for receive{{.Name}} chan {{.OutKind}}
            func (c *grpcClient) Receive{{.Name}}() chan *{{.OutKind}}{
                return c.receive{{.Name}}
            }
            // getter for broadcast{{.Name}} chan *pb.{{.InKind}}
            func (c *grpcClient) Broadcast{{.Name}}() chan *pb.{{.InKind}}{
                return c.broadcast{{.Name}}
            }
        {{- end}} {{/* streaming ifs*/}}
    {{- end }}
{{ end }}

func NewClient(conn *grpc.ClientConn, logger log.Logger, options ...kitGRPC.ClientOption) *grpcClient {
	result := &grpcClient{
		log:logger,        
        {{- range $service := .Services }}
            {{- $serviceName := .Name -}}
            {{- if hasStreaming }}
                directClient: pb.New{{$service.Name}}Client(conn),
            {{- end }} 
            {{- range $method := $service.Methods}}
                {{- if .NoStreaming}}
                    {{.Name }}Endpoint : kitGRPC.NewClient(
						conn,
						"{{ pb_package }}.{{ $serviceName }}",
						"{{.Name}}",
						encode{{.Name}}GRPCRequest(logger),
						decode{{.Name}}GRPCResponse(logger),
						&pb.{{.OutKind}}{},
						options...,
					).Endpoint(),
                {{- else if and .IsServerStreaming (not .IsClientStreaming) }}
                        receive{{.Name}} : make( chan *{{.OutKind}} ),
                {{- else if and (not .IsServerStreaming) .IsClientStreaming }}
                        broadcast{{.Name}} : make( chan *pb.{{.InKind}} ),
                        close{{.Name}} : make( chan struct{} ),
                {{- else if and .IsServerStreaming .IsClientStreaming }}
                        receive{{.Name}} : make( chan *{{.OutKind}} ),
                        broadcast{{.Name}} : make( chan *pb.{{.InKind}} ),
                {{- end }}{{/* if-else no streaming */}}
            {{- end }}{{/* range Method */}}
        {{- end }} {{/* range services */}}
	}
    return result
}
{{/* service interface implementation */}}
{{- range $service := .Services }}
    {{ $serviceName := .Name | upperFirst }}
    {{- range $method := $service.Methods}}            
        {{ if .NoStreaming}}
            func encode{{.Name}}GRPCRequest(logger log.Logger) func(context.Context, interface{})(interface{},error){
                return func(ctx context.Context, req interface{}) (interface{}, error) {
                    pbReq, ok := req.(*{{.InKind}})
                    if !ok{
                        err := fmt.Errorf("expecting *{{.InKind}}Request received %T", req)
                        level.Error(logger).Log("decode{{.Name}}GRPCRequest",err)
                        return nil, err
                    }
                    return NewPBFrom{{.InKind}}(pbReq), nil
                }
            }

            func decode{{.Name}}GRPCResponse(logger log.Logger) func(context.Context, interface{})(interface{},error){
                return func(ctx context.Context, resp interface{}) (interface{}, error) {
                    domResp, ok := resp.(*pb.{{.OutKind}})
                    if !ok{
                        err :=  fmt.Errorf("expecting *pb.{{.OutKind}} received %T", resp)
                        level.Error(logger).Log("encode{{.Name}}GRPCRequest",err)
                        return nil, err
                    }				
                    return New{{.OutKind}}FromPB(domResp), nil
                }
            }
        {{- end }} {{/* streaming ifs*/}}
    {{ end }} {{/* range Method */}}
{{- end }} {{/* range services */}}

{{/* service interface implementation */}}
{{- range $service := .Services }}
    {{ $serviceName := .Name | upperFirst }}
    {{- range $method := $service.Methods}}            
        {{ if .NoStreaming}}
           func (c *grpcClient) {{ template "funcSignature" . }} {
                resp, err := c.{{.Name}}Endpoint(ctx,  &{{ .InKind }}{ {{ template "requestSignature" . }} })
                if err != nil {
                    return {{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{.ZeroValue}},{{- end }} err
                }
                domResp, ok := resp.(*{{.OutKind}})
                if !ok{
                    err := fmt.Errorf("expecting *{{.OutKind}} received %T", resp)
                    return {{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{.ZeroValue}},{{- end }} err
                } 
                return {{ template "responseSignature" . }} nil
            }
        {{- else if and .IsServerStreaming (not .IsClientStreaming) }}
            // unusable : client has to implement Service interface for half duplex {{.Name}}
            func (c *grpcClient) {{.Name}}(req *pb.{{.InKind}}, stream pb.{{$service.Name}}_{{.Name}}Server) error {
               return nil
		    }
        {{- else if and (not .IsServerStreaming) .IsClientStreaming }}
            // unusable : client has to implement Service interface for reverse half duplex {{.Name}}
            func (c *grpcClient) {{.Name}}(stream pb.{{ $serviceName }}_{{.Name}}Server) error {
		        return nil
		    }      
        {{- else if and .IsServerStreaming .IsClientStreaming }}
            // unusable : client has to implement Service interface for full duplex {{.Name}}
            func (c *grpcClient) {{.Name}}(stream pb.{{ $serviceName }}_{{.Name}}Server) error {
				return nil
		    }   
        {{- end }} {{/* streaming ifs*/}}
    {{ end }} {{/* range Method */}}
{{- end }} {{/* range services */}}

{{/* direct client methods */}}
{{- range $service := .Services }}
    {{ $serviceName := .Name | upperFirst }}
    {{- range $method := $service.Methods}}            
        {{- if and .IsServerStreaming (not .IsClientStreaming) }}
            // usable : implementation of direct client for {{ .Name }} - half duplex
            func (c *grpcClient) Call{{ .Name }}(extCtx context.Context {{- $message := messageByKind .InKind -}}{{- range $message.Fields }},{{ if .IsBasic }}{{lowerFirst .PublicName}} {{.GoKind}}{{- else }}{{lowerFirst .PublicName}} *{{.Kind}}{{- end }}{{- end }}) error {
                var err error
                ctx, cancel := context.WithCancel(extCtx)

                ctx = context.WithValue(ctx, kitGRPC.ContextKeyRequestMethod, "Call{{.Name}}")

                req := NewPBFrom{{.InKind}}(&{{ .InKind }}{ {{ template "requestSignature" . }} })
                
                md := &metadata.MD{}
                for _, f := range c.before {
                    ctx = f(ctx, md)
                }
                ctx = metadata.NewOutgoingContext(ctx, *md)

                var header, trailer metadata.MD

                stream, err := c.directClient.{{ .Name }}(ctx, req, grpc.Header(&header), grpc.Trailer(&trailer))
                if err != nil {
                    c.log.Log("client_error", err)
                    return err
                }

                var closing = func() {
                    cancel()
                    stream.CloseSend()
                    for _, f := range c.after {
                        ctx = f(ctx, header, trailer)
                    }
                }
                // receiving from server loop
                for {
                    message, err := stream.Recv()
                    if err == io.EOF {
                        closing()
                        // read done.
                        return nil
                    }
                    if err != nil {
                        // TODO : if server needs to close, with an error, which is a known error (no-error)
                        //if err == CloseCommunication {
                        //    closing()
                        //    return {{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{.ZeroValue}}, {{- end }} nil
                        //}
                        c.log.Log("client_error", fmt.Sprintf("server return error : %v\n", err))
                        closing()
                        return err
                    }

                    domResp := New{{.OutKind}}FromPB(message)
                    c.receive{{.Name}} <- domResp // writing payloads to this channel, so dev can collect them
                }

                return nil
            }
        {{- else if and (not .IsServerStreaming) .IsClientStreaming }}
             // usable : implementation of direct client for {{ .Name }} - reverse half duplex
             func (c *grpcClient) Call{{ .Name }}(extCtx context.Context) (*{{.OutKind}}, error) {
                var err error
                ctx := context.WithValue(extCtx, kitGRPC.ContextKeyRequestMethod, "Call{{.Name}}")

                md := &metadata.MD{}
                for _, f := range c.before {
                    ctx = f(ctx, md)
                }
                ctx = metadata.NewOutgoingContext(ctx, *md)

                var header, trailer metadata.MD

                stream, err := c.directClient.{{ .Name }}(ctx, grpc.Header(&header), grpc.Trailer(&trailer))
                if err != nil {
                    c.log.Log("client_error", err)
                    return nil, err
                }

                var (
                    sendErr error
                    domResp *{{.OutKind}}
                )
                // sending messages loop
                waitc := make(chan struct{})
                go func(grCtx context.Context) {
                    for {
                        select {
                        case <-grCtx.Done():
                            c.log.Log("client", "Context done.")
                            close(waitc)
                            return
                        case req := <-c.broadcast{{.Name}}:
                            // TODO : building a request as following : 
                            // req := NewPBFrom{{.InKind}}(&{{ .InKind }}{ {{ template "requestSignature" . }} })
                            // then write it to the channel:
                            // c.broadcast{{.Name}} <- req
                            if sendErr = stream.Send(req); sendErr != nil {
                                c.log.Log("client_error", fmt.Sprintf("Failed to send a request: %v\n", sendErr))
                                close(waitc)
                                return
                            }
                        case <-c.close{{.Name}}:
                            reply, err := stream.CloseAndRecv()
                            if err != nil {
                                level.Error(c.log).Log("client_error", fmt.Sprintf("%v.CloseAndRecv() got error %v, want %v", stream, err, nil))
                            }
                            level.Debug(c.log).Log("reply", fmt.Sprintf("%#v", reply))
                            for _, f := range c.after {
                                ctx = f(ctx, header, trailer)
                            }
                            domResp = New{{.OutKind}}FromPB(reply)
                            close(waitc)
                        }
                    }
                }(ctx)
                <-waitc // block here until context done or send error
                return domResp, sendErr
            }
        {{- else if and .IsServerStreaming .IsClientStreaming }}
            // usable : implementation of direct client for {{ .Name }} - full duplex
            func (c *grpcClient) Call{{ .Name }}(extCtx context.Context) error {
                var err error
                ctx, cancel := context.WithCancel(extCtx)

                ctx = context.WithValue(ctx, kitGRPC.ContextKeyRequestMethod, "Call{{.Name}}")
                   
                md := &metadata.MD{}
                for _, f := range c.before {
                    ctx = f(ctx, md)
                }
                ctx = metadata.NewOutgoingContext(ctx, *md)

                var header, trailer metadata.MD

                stream, err := c.directClient.{{ .Name }}(ctx, grpc.Header(&header), grpc.Trailer(&trailer))
                if err != nil {
                    c.log.Log("client_error", err)
                    return err
                }

                var closing = func() {
                    cancel()
                    stream.CloseSend()
                    for _, f := range c.after {
                        ctx = f(ctx, header, trailer)
                    }
                }
                var sendErr error
                // sending messages loop
                go func(grCtx context.Context) {
                    for {
                        select {
                        case <-grCtx.Done():
                            c.log.Log("client", "Context done.")
                            return
                        case req := <-c.broadcast{{.Name}}:
                            // TODO : building a request as following : 
                            // req := NewPBFrom{{.InKind}}(&{{ .InKind }}{ {{ template "requestSignature" . }} })
                            // then write it to the channel:
                            // c.broadcast{{.Name}} <- req
                            if sendErr = stream.Send(req); sendErr != nil {
                                c.log.Log("client_error", fmt.Sprintf("Failed to send a request: %v\n", sendErr))
                                return
                            }                        
                        }
                    }
                }(ctx)
                // receiving from server loop
                for {
                    message, err := stream.Recv()
                    if err == io.EOF {
                        closing()
                        // read done.
                        return nil
                    }
                    if err != nil {
                        // TODO : if server needs to close, with an error, which is a known error (no-error)
                        //if err == CloseCommunication {
                        //    closing()
                        //    return {{ $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{.ZeroValue}}, {{- end }} nil
                        //}
                        c.log.Log("client_error", fmt.Sprintf("server return error : %v\n", err))
                        closing()
                        return  err
                    }
                    if sendErr != nil {
                        return sendErr
                    }
                    domResp := New{{.OutKind}}FromPB(message)
                    c.receive{{.Name}} <- domResp // writing payloads to this channel, so dev can collect them
                }

                return nil
            }
        {{- end }} {{/* streaming ifs*/}}
    {{ end }} {{/* range Method */}}
{{- end }} {{/* range services */}}

{{- end }}{{/* we have service */}}