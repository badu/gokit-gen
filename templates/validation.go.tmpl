{{- if ne (len .Services) 0}}
package {{ projectName }}

import(
    "context"
	"fmt"
	
	"github.com/go-kit/kit/log"
    "github.com/go-kit/kit/log/level"
    "google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

    pb "{{ go_package }}"
    {{ range $key, $value := sharedImports }} {{ $key }} "{{ $value }}" {{- end }}
    
    kitGRPC "github.com/go-kit/kit/transport/grpc"
)

{{- range $service := .Services }}
    {{- range $method := $service.Methods }}
        {{ if $method.NoStreaming }}
            func Validate{{.InKind}}(pbReq *pb.{{.InKind}}) error{
                // TODO : review validation of protobuf
                {{- $message := messageByKind .InKind -}}
                {{- range $message.Fields }}
                    {{- if .IsOneOf }}
                        // TODO oneOf {{ .PublicName }} {{.GoKind }}
                    {{- else if .IsMap }}
                        // TODO map {{ .PublicName }} {{.GoKind }}
                    {{- else if .IsReserved }}
                        // TODO reserved {{ .PublicName }} {{.GoKind }}
                    {{- else if .IsBasic }}
                        {{- if .FromShared }}
                            // TODO enum from shared {{ .FromPackage }}
                        {{- else }}
                            if pbReq.{{ .PublicName }} == {{ .ZeroValue }}{
                                return status.Error(codes.InvalidArgument, "{{lowerFirst .PublicName}} cannot be empty")
                            }  
                        {{- end }}
                    {{- else if .IsRepeated}}
                        if len(pbReq.{{ .PublicName }}) == 0{
                            return status.Error(codes.InvalidArgument, "{{lowerFirst .PublicName}} cannot be zero length")
                        }
                    {{- else if isEnumField . }}
                        {{- if .FromShared }}
                            // TODO enum from shared {{ .FromPackage }}
                        {{- else }}
                            if int(pbReq.{{ .PublicName }}) == 0 {
                                return status.Error(codes.InvalidArgument, "{{lowerFirst .PublicName}} cannot zero")
                            }
                        {{- end }}
                    {{- else }}
                        {{- if .FromShared }}
                            // TODO from shared {{ .FromPackage }}
                        {{- else }}
                            if pbReq.{{ .PublicName }} == nil{
                                return status.Error(codes.InvalidArgument, "{{lowerFirst .PublicName}} cannot be nil")
                            }
                        {{- end }}
                    {{- end }}
                {{- end }}
                 
                return nil
            }
        {{- end }} 
    {{- end}}
{{- end }}

{{- end }}{{/* we have service */}}