{{/* functions signature */}}
{{ define "funcSignature" }}{{ .Name }}(ctx {{- $message := messageByKind .InKind -}}{{- range $message.Fields }},domReq.{{ .PublicName }} {{- end }}){{ end }}
{{ define "returnSignature" }}{{- $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{lowerFirst .PublicName}}, {{- end }} err{{- end }}
{{ define "responseSignature" }}{{- $message := messageByKind .OutKind -}}{{- range $message.Fields }}{{.PublicName}}:{{lowerFirst .PublicName}}, {{- end }}{{- end }}
{{- if ne (len .Services) 0}}
package {{ projectName }}

import(
    "context"
	"fmt"
	
	"github.com/go-kit/kit/endpoint"
    "github.com/go-kit/kit/log/level"

    pb "{{ go_package }}"
)

type Endpoints struct {
    {{- range $service := .Services }}
        {{- range $method := $service.Methods}}
            {{- if .NoStreaming }}
                {{.Name}}Endpoint endpoint.Endpoint
            {{- else if and .IsServerStreaming (not .IsClientStreaming) }}                
                {{.Name}}Endpoint endpoint.Endpoint // half duplex
            {{- else if and (not .IsServerStreaming) .IsClientStreaming }}                
                {{.Name}}Endpoint endpoint.Endpoint // reverse half duplex
            {{- else if and (.IsServerStreaming) (.IsClientStreaming) }}                
                {{.Name}}Endpoint endpoint.Endpoint //  full duplex
            {{- end}} {{/* streaming ifs*/}}
        {{- end}} {{/* range Method */}}
    {{- end }} {{/* range services */}}
}

func wrapEndpoint(ep endpoint.Endpoint, mwares []endpoint.Middleware) endpoint.Endpoint {
	for i := range mwares {
		ep = mwares[i](ep)
	}
	return ep
}

func MakeEndpoints(svc Service, mwares []endpoint.Middleware) Endpoints {
	return Endpoints{		
        {{- range $service := .Services }}
            {{ range $method := $service.Methods}}	{{.Name}}Endpoint: wrapEndpoint(make{{.Name}}Endpoint(svc), mwares),
		    {{ end}} {{/* range Method */}}
        {{- end }} {{/* range services */}}
	}
}

{{- range $service := .Services }}
    {{- range $method := $service.Methods}}
        {{- if and $method.NoStreaming}}
           func make{{.Name}}Endpoint(svc Service) endpoint.Endpoint {
			return func(ctx context.Context, req interface{}) (interface{}, error) {
				domReq, ok := req.(*{{.InKind}})
				if !ok{
					err := fmt.Errorf("expecting *{{.Name}}Request received %T", req)
					level.Error(svc.Log()).Log("endpoint_error",err)
					return nil, err
				}
				{{ template "returnSignature" . }} := svc.{{ template "funcSignature" . }}
				if err != nil {
					return nil, err
				}
				return &{{ .OutKind }}{ {{- template "responseSignature" . }} }, nil
			}
		}
        {{- else if and .IsServerStreaming (not .IsClientStreaming) }}
            // half duplex
            func make{{.Name}}Endpoint(svc Service) endpoint.Endpoint {
                return func(ctx context.Context, req interface{}) (interface{}, error) {
                    reqAndStream, ok := req.(*RequestAndStream{{.Name}})
                    if !ok{
                        err := fmt.Errorf("expecting *RequestAndStream{{.Name}} received %T", req)
                        level.Error(svc.Log()).Log("endpoint_error",err)
                        return nil, err
                    }
                    err:= svc.{{.Name}}(reqAndStream.Request, reqAndStream.Stream)
                    if err!=nil{
                        return nil,err
                    }
                    return nil,nil
                }
            }           
        {{- else if and (not .IsServerStreaming) .IsClientStreaming }}
            // reverse half duplex
            func make{{.Name}}Endpoint(svc Service) endpoint.Endpoint {
                return func(ctx context.Context, req interface{}) (interface{}, error) {
                    stream, ok := req.(pb.{{ $service.Name }}_{{.Name}}Server)
                    if !ok{
                        err := fmt.Errorf("expecting pb.{{ $service.Name }}_{{.Name}}Server received %T", req)
                        level.Error(svc.Log()).Log("endpoint_error",err)
                        return nil, err
                    }
                    err:= svc.{{.Name}}(stream)
                    if err!=nil{
                        return nil,err
                    }
                    return nil,nil
                }
            }            
        {{- else if and (.IsServerStreaming) (.IsClientStreaming) }}
            // full duplex
            func make{{.Name}}Endpoint(svc Service) endpoint.Endpoint {
                return func(ctx context.Context, req interface{}) (interface{}, error) {
                    stream, ok := req.(pb.{{ $service.Name }}_{{.Name}}Server)
                    if !ok{
                        err := fmt.Errorf("expecting pb.{{ $service.Name }}_{{.Name}}Server received %T", req)
                        level.Error(svc.Log()).Log("endpoint_error",err)
                        return nil, err
                    }
                    err:= svc.{{.Name}}(stream)
                    if err!=nil{
                        return nil,err
                    }
                    return nil,nil
                }
            }            
        {{- end }} {{/* streaming ifs*/}}
    {{ end }} {{/* range Method */}}
{{- end }} {{/* range services */}}

{{- end }}{{/* we have service */}}