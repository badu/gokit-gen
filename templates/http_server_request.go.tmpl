{{- if usesHTTP }}{{- if ne (len .Services) 0}}
package {{ projectName }}

import(
    "context"
	"fmt"
    "net/http"
	"encoding/json"
		
	"github.com/go-kit/kit/log"
    "github.com/go-kit/kit/log/level"
    "github.com/go-kit/kit/endpoint"
    "github.com/gorilla/mux"

    pb "{{ go_package }}"
    {{ range $key, $value := sharedImports }} {{ $key }} "{{ $value }}" {{- end }}
    
    kitHTTP "github.com/go-kit/kit/transport/http"
)

{{- range $service := .Services }}
    {{- range $method := $service.Methods }}
        {{ if $method.NoStreaming }}
            func decode{{.Name}}HTTPRequest(logger log.Logger) func(context.Context, *http.Request) (interface{}, error){
                return func(ctx context.Context, r *http.Request) (interface{}, error) {
                    var request pb.{{.InKind}}
                    if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
                        level.Debug(logger).Log("json_decode_error",err)
                        return nil, err
                    }
                    return New{{.InKind}}FromPB(&request), nil
                }
            }

        {{- end }} 
    {{- end}}
{{- end }}
{{- end }}{{/* we have service */}}
{{- end }}{{/* uses HTTP */}}