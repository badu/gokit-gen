{{- if usesHTTP }}{{- if ne (len .Services) 0}}
package {{ projectName }}

import(
    "context"
	"fmt"
    "net/http"
	"encoding/json"
		
	"github.com/go-kit/kit/log"
    "github.com/go-kit/kit/log/level"
    "github.com/gorilla/mux"
    "google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"github.com/go-kit/kit/endpoint"

    pb "{{ go_package }}"
    {{ range $key, $value := sharedImports }} {{ $key }} "{{ $value }}" {{- end }}
    kitHTTP "github.com/go-kit/kit/transport/http"
    kitJWT "github.com/go-kit/kit/auth/jwt"
)

{{- range $service := .Services }}
    {{- range $method := $service.Methods }}
        {{ if $method.NoStreaming }}
           func Make{{.Name}}HTTPHandler(ep endpoint.Endpoint, logger log.Logger, options...kitHTTP.ServerOption) *kitHTTP.Server {
                return kitHTTP.NewServer(
                    ep,
                    decode{{.Name}}HTTPRequest(logger),
                    encode{{.Name}}HTTPResponse(logger),
                    options...,
                )
            }
        {{- end }} 
    {{- end}}
{{- end }}

{{- range $service := .Services }}
    {{ $serviceName := .Name | upperFirst }}
    func RegisterHandlers(router *mux.Router, endpoints Endpoints, logger log.Logger, options...kitHTTP.ServerOption) {
    {{- range $method := $service.Methods}}
        {{- if $method.NoStreaming}}
            {{ $route := .GetHTTPRoute -}}
            // {{.Name}}
            router.Methods({{.GetHTTPVerb}}).Path("{{$route}}").Handler(Make{{.Name}}HTTPHandler(endpoints.{{.Name}}Endpoint, logger, options...))
            router.Methods(http.MethodOptions).Path( "{{$route}}").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
                w.WriteHeader(http.StatusOK)// CORS Options
            })        
        {{- end }} {{/* streaming ifs*/}}
    {{ end }} {{/* range Method */}}
    }
{{- end }} {{/* range services */}}

func GRPCToJSONError(log log.Logger) func(context.Context, error, http.ResponseWriter) {
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		if err == nil {
			return
		}
		type errorWrapper struct {
			Error string `json:"error"`
		}
		// put headers, no matter what
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		if headerer, ok := err.(kitHTTP.Headerer); ok {
			for k, values := range headerer.Headers() {
				for _, v := range values {
					w.Header().Add(k, v)
				}
			}
		}

		// test for JWT error
		jwtErr, isErr := ctx.Value(kitJWT.JWTClaimsContextKey).(error)
		if isErr {
			w.WriteHeader(http.StatusUnauthorized)
			encErr := json.NewEncoder(w).Encode(errorWrapper{Error: "access denied : " + jwtErr.Error()})
			if encErr != nil {
				level.Error(log).Log("panic_scenario", encErr)
			}
			return
		}
		// test for GRPC status error
		statusErr := status.Convert(err)
		if statusErr != nil {
			code := statusErr.Code()
			switch code {
			case codes.InvalidArgument:
				w.WriteHeader(http.StatusBadRequest)
			case codes.NotFound:
				w.WriteHeader(http.StatusNotFound)
			case codes.AlreadyExists:
				w.WriteHeader(http.StatusConflict)
			case codes.PermissionDenied:
				w.WriteHeader(http.StatusUnauthorized)
			case codes.ResourceExhausted:
				w.WriteHeader(http.StatusForbidden)
			case codes.Internal:
				w.WriteHeader(http.StatusInternalServerError)
			}
			encErr := json.NewEncoder(w).Encode(errorWrapper{Error: err.Error()})
			if encErr != nil {
				panic(encErr)
			}
			return
		}
		// default - not GRPC status error nor JWT error
		encErr := json.NewEncoder(w).Encode(errorWrapper{Error: err.Error()})
		if encErr != nil {
			level.Error(log).Log("panic_scenario", encErr)
		}
	}
}
{{- end }}{{/* we have service */}}
{{- end }}{{/* uses HTTP */}}